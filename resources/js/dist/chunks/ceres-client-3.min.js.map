{"version":3,"sources":["webpack:///./node_modules/core-js/internals/object-to-array.js","webpack:///./node_modules/core-js/modules/es.object.values.js","webpack:///./node_modules/core-js/modules/es.object.entries.js","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?ea6c","webpack:///resources/js/src/app/components/item/VariationSelect.vue","webpack:///./resources/js/src/app/components/item/VariationSelect.vue?68f5","webpack:///./resources/js/src/app/components/item/VariationSelect.vue"],"names":["DESCRIPTORS","objectKeys","toIndexedObject","propertyIsEnumerable","f","createMethod","TO_ENTRIES","it","key","O","keys","length","i","result","call","push","module","exports","entries","values","$","$values","target","stat","$entries","render","_vm","this","_h","$createElement","_c","_self","staticClass","attributes","possibleUnitCombinationIds","isContentVisible","_l","attribute","index","type","addPleaseSelectOption","hasSelection","directives","name","rawName","value","isTextCut","expression","attrs","title","_v","currentSelection","attributes_in_current_variation","attributeValueId","_s","_e","else","ref","refInFor","id","attributeId","selected","selectedAttributes","domProps","on","change","$event","selectAttribute","isAttributeSelectionValid","for","getSelectedAttributeValueName","class","images","active","invalid","click","$translate","hasEmptyOption","getTooltip","src","imageUrl","alt","selectUnit","unitCombinationId","parseInt","selectedUnit","isUnitSelectionValid","possibleUnits","_t","_withStripped","props","forceContent","inject","itemId","default","data","filteredVariationsCache","lastContentCount","mounted","$store","commit","computed","methods","changes","watch","component","options","__file"],"mappings":"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","file":"chunks/ceres-client-3.min.js","sourcesContent":["var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","var $ = require('../internals/export');\nvar $values = require('../internals/object-to-array').values;\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n","var $ = require('../internals/export');\nvar $entries = require('../internals/object-to-array').entries;\n\n// `Object.entries` method\n// https://tc39.es/ecma262/#sec-object.entries\n$({ target: 'Object', stat: true }, {\n  entries: function entries(O) {\n    return $entries(O);\n  }\n});\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"row\" },\n    [\n      _vm.attributes.length ||\n      (_vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible)\n        ? [\n            _vm._l(_vm.attributes, function(attribute, index) {\n              return _c(\"div\", { key: index, staticClass: \"col-12\" }, [\n                attribute.type === \"dropdown\"\n                  ? _c(\"div\", { staticClass: \"custom-dropdown\" }, [\n                      _vm.addPleaseSelectOption || !_vm.hasSelection\n                        ? _c(\"label\", { staticClass: \"hide_if-follow\" }, [\n                            _c(\n                              \"div\",\n                              {\n                                directives: [\n                                  {\n                                    name: \"tooltip\",\n                                    rawName: \"v-tooltip\",\n                                    value: _vm.isTextCut(attribute.name),\n                                    expression: \"isTextCut(attribute.name)\"\n                                  }\n                                ],\n                                staticClass: \"text-muted\",\n                                attrs: {\n                                  \"data-toggle\": \"tooltip\",\n                                  \"data-placement\": \"top\",\n                                  title: attribute.name\n                                }\n                              },\n                              [_vm._v(\"\\n            Größe wählen\\n          \")]\n                            )\n                          ])\n                        : _vm.currentSelection\n                        ? _c(\n                            \"label\",\n                            { staticClass: \"hide_if-follow\" },\n                            _vm._l(attribute.values, function(value) {\n                              return _c(\n                                \"div\",\n                                _vm._l(\n                                  _vm.currentSelection.attributes,\n                                  function(attributes_in_current_variation) {\n                                    return value.attributeValueId ===\n                                      attributes_in_current_variation.attributeValueId\n                                      ? _c(\"div\", [\n                                          _vm._v(\n                                            \"\\n              \" +\n                                              _vm._s(value.name) +\n                                              \"\\n            \"\n                                          )\n                                        ])\n                                      : _vm._e()\n                                  }\n                                ),\n                                0\n                              )\n                            }),\n                            0\n                          )\n                        : _vm._e(),\n                      _vm._v(\" \"),\n                      _c(\n                        \"label\",\n                        { staticClass: \"hide_if\", attrs: { else: \"\" } },\n                        [_vm._v(\"\\n          Größe wählen\\n        \")]\n                      ),\n                      _vm._v(\" \"),\n                      attribute.type === \"dropdown\" &&\n                      attribute.values.length > 0\n                        ? _c(\n                            \"div\",\n                            {\n                              ref: \"attributesContaner\",\n                              refInFor: true,\n                              staticClass: \"custom-dropdown-list\"\n                            },\n                            _vm._l(attribute.values, function(value, index) {\n                              return _c(\n                                \"div\",\n                                { staticClass: \"d-block w-100\" },\n                                [\n                                  _c(\"input\", {\n                                    staticClass: \"d-none\",\n                                    attrs: {\n                                      type: \"radio\",\n                                      id: value.attributeValueId,\n                                      name: attribute.attributeId,\n                                      selected:\n                                        value.attributeValueId ===\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ]\n                                    },\n                                    domProps: { value: value.attributeValueId },\n                                    on: {\n                                      change: function($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          $event.target.value\n                                        )\n                                      }\n                                    }\n                                  }),\n                                  _vm._v(\" \"),\n                                  _vm.isAttributeSelectionValid(\n                                    attribute.attributeId,\n                                    value.attributeValueId\n                                  )\n                                    ? _c(\n                                        \"label\",\n                                        {\n                                          staticClass:\n                                            \"d-flex justify-content-between w-100\",\n                                          attrs: { for: value.attributeValueId }\n                                        },\n                                        [\n                                          _vm._v(\n                                            \"\\n              \" +\n                                              _vm._s(value.name) +\n                                              \"\\n            \"\n                                          )\n                                        ]\n                                      )\n                                    : _vm._e()\n                                ]\n                              )\n                            }),\n                            0\n                          )\n                        : _vm._e()\n                    ])\n                  : attribute.type === \"box\" || attribute.type === \"image\"\n                  ? _c(\"div\", [\n                      _c(\n                        \"span\",\n                        {\n                          staticClass: \"text-muted\",\n                          attrs: { \"data-testing\": \"attribute-name\" }\n                        },\n                        [_vm._v(_vm._s(attribute.name) + \":\")]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"b\",\n                        { attrs: { \"data-testing\": \"attribute-value\" } },\n                        [\n                          _vm._v(\n                            _vm._s(_vm.getSelectedAttributeValueName(attribute))\n                          )\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        {\n                          staticClass: \"v-s-boxes py-3\",\n                          class: { images: attribute.type === \"image\" }\n                        },\n                        [\n                          _vm.addPleaseSelectOption\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"v-s-box bg-white empty-option\",\n                                  class: {\n                                    active:\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ] === -1,\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      -1\n                                    )\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\"\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        -1\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"span\", { staticClass: \"mx-3\" }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    )\n                                  ])\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.hasEmptyOption\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"v-s-box bg-white empty-option\",\n                                  class: {\n                                    active:\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ] === null,\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      null,\n                                      true\n                                    )\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\"\n                                  },\n                                  on: {\n                                    click: function($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        null\n                                      )\n                                    }\n                                  }\n                                },\n                                [\n                                  _c(\"span\", { staticClass: \"mx-3\" }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemNoSelection\"\n                                        )\n                                      )\n                                    )\n                                  ])\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm._l(attribute.values, function(value) {\n                            return _c(\n                              \"div\",\n                              {\n                                directives: [\n                                  {\n                                    name: \"tooltip\",\n                                    rawName: \"v-tooltip\",\n                                    value: true,\n                                    expression: \"true\"\n                                  }\n                                ],\n                                key: value.attributeValueId,\n                                staticClass: \"v-s-box bg-white\",\n                                class: {\n                                  active:\n                                    value.attributeValueId ===\n                                    _vm.selectedAttributes[\n                                      attribute.attributeId\n                                    ],\n                                  invalid: !_vm.isAttributeSelectionValid(\n                                    attribute.attributeId,\n                                    value.attributeValueId,\n                                    true\n                                  )\n                                },\n                                attrs: {\n                                  \"data-testing\": \"variation-select-box\",\n                                  \"data-html\": \"true\",\n                                  \"data-toggle\": \"tooltip\",\n                                  \"data-placement\": \"top\",\n                                  \"data-original-title\": _vm.getTooltip(\n                                    attribute,\n                                    value\n                                  )\n                                },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.selectAttribute(\n                                      attribute.attributeId,\n                                      value.attributeValueId\n                                    )\n                                  }\n                                }\n                              },\n                              [\n                                attribute.type === \"box\"\n                                  ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(_vm._s(value.name))\n                                    ])\n                                  : _c(\"img\", {\n                                      staticClass: \"p-1\",\n                                      attrs: {\n                                        src: value.imageUrl,\n                                        alt: value.name\n                                      }\n                                    })\n                              ]\n                            )\n                          })\n                        ],\n                        2\n                      )\n                    ])\n                  : _vm._e()\n              ])\n            }),\n            _vm._v(\" \"),\n            _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        attrs: {\n                          id: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit\"\n                        },\n                        on: {\n                          change: function($event) {\n                            return _vm.selectUnit($event.target.value)\n                          }\n                        }\n                      },\n                      _vm._l(_vm.possibleUnitCombinationIds, function(\n                        unitCombinationId\n                      ) {\n                        return _c(\n                          \"option\",\n                          {\n                            key: unitCombinationId,\n                            domProps: {\n                              value: unitCombinationId,\n                              selected:\n                                parseInt(unitCombinationId) === _vm.selectedUnit\n                            }\n                          },\n                          [\n                            _vm.isUnitSelectionValid(unitCombinationId)\n                              ? [\n                                  _vm._v(\n                                    \"\\n              \" +\n                                      _vm._s(\n                                        _vm.possibleUnits[unitCombinationId]\n                                      ) +\n                                      \"\\n            \"\n                                  )\n                                ]\n                              : [\n                                  _vm._v(\n                                    \"\\n              \" +\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemInvalidAttribute\",\n                                          {\n                                            name:\n                                              _vm.possibleUnits[\n                                                unitCombinationId\n                                              ]\n                                          }\n                                        )\n                                      ) +\n                                      \"\\n            \"\n                                  )\n                                ]\n                          ],\n                          2\n                        )\n                      }),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"label\",\n                      {\n                        attrs: {\n                          for: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit-label\"\n                        }\n                      },\n                      [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$translate(\"Ceres::Template.singleItemContent\")\n                          )\n                        )\n                      ]\n                    )\n                  ])\n                ])\n              : _vm._e()\n          ]\n        : [_vm._t(\"default\")]\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"row\">\n    <template v-if=\"attributes.length || (possibleUnitCombinationIds.length > 1 && isContentVisible)\">\n      <div class=\"col-12\" v-for=\"(attribute, index) in attributes\" :key=\"index\">\n        <!-- dropdown -->\n        <div class=\"custom-dropdown\" v-if=\"attribute.type === 'dropdown'\">\n          <label class=\"hide_if-follow\" v-if=\"addPleaseSelectOption || !hasSelection\">\n            <div class=\"text-muted\" v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\"\n                 data-placement=\"top\" :title=\"attribute.name\">\n              Größe wählen\n            </div>\n          </label>\n          <label class=\"hide_if-follow\" v-else-if=\"currentSelection\">\n            <div v-for=\"value in attribute.values\"\n            >\n              <div v-for=\"attributes_in_current_variation in currentSelection.attributes\"\n                   v-if=\"value.attributeValueId === attributes_in_current_variation.attributeValueId\"\n              >\n                {{value.name}}\n              </div>\n            </div>\n          </label>\n          <label class=\"hide_if\" else>\n            Größe wählen\n          </label>\n          <div class=\"custom-dropdown-list\" ref=\"attributesContaner\"\n               v-if=\"attribute.type === 'dropdown' && attribute.values.length > 0\">\n            <div v-for=\"(value, index) in attribute.values\" class=\"d-block w-100\">\n              <input type=\"radio\" class=\"d-none\" :id=\"value.attributeValueId\"\n                     :name=\"attribute.attributeId\" :value=\"value.attributeValueId\"\n                     :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\"\n                     @change=\"selectAttribute(attribute.attributeId, $event.target.value)\">\n              <label class=\"d-flex justify-content-between w-100\" :for=\"value.attributeValueId\"\n                     v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId)\"\n              >\n                {{value.name}}\n              </label>\n            </div>\n          </div>\n        </div>\n        <!-- /dropdown -->\n\n        <!-- box and image -->\n        <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\n          <span class=\"text-muted\" data-testing=\"attribute-name\">{{ attribute.name }}:</span> <b\n            data-testing=\"attribute-value\">{{ getSelectedAttributeValueName(attribute) }}</b>\n          <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\n            <div class=\"v-s-box bg-white empty-option\"\n                 data-testing=\"variation-select-box\"\n                 v-if=\"addPleaseSelectOption\"\n                 @click=\"selectAttribute(attribute.attributeId, -1)\"\n                 :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\n              <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\n            </div>\n            <div class=\"v-s-box bg-white empty-option\"\n                 data-testing=\"variation-select-box\"\n                 v-if=\"hasEmptyOption\"\n                 @click=\"selectAttribute(attribute.attributeId, null)\"\n                 :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null, true) }\">\n              <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\n            </div>\n\n            <div class=\"v-s-box bg-white\"\n                 data-testing=\"variation-select-box\"\n                 v-for=\"value in attribute.values\"\n                 @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\n                 :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true) }\"\n                 v-tooltip=\"true\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\"\n                 :data-original-title=\"getTooltip(attribute, value)\"\n                 :key=\"value.attributeValueId\">\n              <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\n              <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\n            </div>\n          </div>\n        </div>\n        <!-- /box and image -->\n      </div>\n\n      <!-- units -->\n      <div class=\"col-12 variation-select\" v-if=\"possibleUnitCombinationIds.length > 1 && isContentVisible\">\n        <div class=\"input-unit\">\n          <select id=\"unit-combination-ids-select\" class=\"custom-select\" @change=\"selectUnit($event.target.value)\"\n                  data-testing=\"variation-select-unit\">\n            <option\n                v-for=\"unitCombinationId in possibleUnitCombinationIds\"\n                :value=\"unitCombinationId\"\n                :selected=\"parseInt(unitCombinationId) === selectedUnit\"\n                :key=\"unitCombinationId\">\n              <template v-if=\"isUnitSelectionValid(unitCombinationId)\">\n                {{ possibleUnits[unitCombinationId] }}\n              </template>\n              <template v-else>\n                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": possibleUnits[unitCombinationId]\n                }) }}\n              </template>\n            </option>\n          </select>\n          <label for=\"unit-combination-ids-select\" data-testing=\"variation-select-unit-label\">{{\n            $translate(\"Ceres::Template.singleItemContent\") }}</label>\n        </div>\n      </div>\n      <!-- /units -->\n    </template>\n\n    <template v-else>\n      <slot></slot>\n    </template>\n  </div>\n</template>\n\n<script>\nimport {textWidth} from \"../../helper/dom\";\nimport {isDefined, isNull, isNullOrUndefined} from \"../../helper/utils\";\n\nconst NotificationService = require(\"../../services/NotificationService\");\n\nexport default {\n\n  name: \"variation-select\",\n\n  props: {\n    forceContent:\n        {\n          type: Boolean,\n          default: false\n        }\n  },\n\n  inject: {\n    itemId: {\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      filteredVariationsCache: {},\n      lastContentCount: 0\n    };\n  },\n\n  mounted() {\n    // initially check for valid selection and disable add to basket button\n    this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!this.currentSelection);\n  },\n\n  computed:\n      {\n        currentVariation() {\n          return this.$store.getters[`${this.itemId}/currentItemVariation`];\n        },\n\n        currentVariationSelect() {\n          return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\n        },\n\n        /**\n         * returns true if any variation has no attributes\n         */\n        hasEmptyOption() {\n          return this.variations.some(variation => !variation.attributes.length);\n        },\n\n        addPleaseSelectOption() {\n          return App.config.item.showPleaseSelect;\n        },\n\n        /**\n         * returns the variation, based on the selected attributes / unit\n         * returns false if there are none or multiple results\n         */\n        currentSelection() {\n          const filteredVariations = this.filterVariations(null, null, true);\n\n          if (filteredVariations.length === 1) {\n            return filteredVariations[0];\n          }\n\n          return false;\n        },\n\n        /**\n         * returns all units, selectable by current selection\n         * prop 'forceContent' with value true will return all units, without filtering\n         */\n        possibleUnits() {\n          // use an object, to make the entries unique\n          const possibleUnits = {};\n          const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n\n          for (const variation of variations) {\n            possibleUnits[variation.unitCombinationId] = variation.unitName;\n          }\n\n          return possibleUnits;\n        },\n\n        possibleUnitCombinationIds() {\n          return this.transformPossibleUnits(this.possibleUnits).map(value => value[0]);\n        },\n\n        isContentVisible() {\n          return !this.forceContent && !!this.currentSelection || this.forceContent;\n        },\n\n        hasSelection() {\n          return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\n        },\n\n        attributes() {\n          return this.currentVariationSelect && this.currentVariationSelect.attributes;\n        },\n\n        selectedAttributes() {\n          return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\n        },\n\n        selectedUnit() {\n          return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\n        },\n\n        variations() {\n          return this.currentVariationSelect && this.currentVariationSelect.variations;\n        }\n      },\n\n  methods:\n      {\n        /**\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        selectAttribute(attributeId, attributeValueId) {\n          attributeValueId = parseInt(attributeValueId) || null;\n\n          if (this.selectedAttributes[attributeId] !== attributeValueId) {\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemAttribute`, {attributeId, attributeValueId});\n            this.onSelectionChange(attributeId, attributeValueId, null);\n          }\n        },\n\n        /**\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {[number, string]} unitId\n         */\n        selectUnit(unitId) {\n          unitId = parseInt(unitId);\n          this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, unitId);\n          this.onSelectionChange(null, null, unitId);\n        },\n\n        onSelectionChange(attributeId, attributeValueId, unitId) {\n          if (this.currentSelection) {\n            this.setVariation(this.currentSelection.variationId);\n          } else if (!this.hasSelection) {\n            // user switched back to \"please select\"\n            this.setVariation(0);\n          } else {\n            this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n          }\n\n          this.lastContentCount = this.possibleUnitCombinationIds.length;\n        },\n\n        /**\n         * changes the selected attributes / unit, to ensure a valid seelction\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        unsetInvalidSelection(attributeId, attributeValueId, unitId) {\n          const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n          const closestVariations = this.getClosestVariations(qualifiedVariations);\n\n          // if the salable 'closestVariations' is undefined, take the not-salable one\n          const closestVariation = closestVariations[0] || closestVariations[1];\n\n          if (!closestVariation) {\n            return;\n          }\n\n          const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n\n          this.correctSelection(invalidSelection);\n        },\n\n        getTooltip(attribute, attributeValue) {\n          if (!this.isAttributeSelectionValid(attribute.attributeId, attributeValue.attributeValueId, true)) {\n            return this.getInvalidOptionTooltip(attribute.attributeId, attributeValue.attributeValueId);\n          } else if (attribute.type === \"image\") {\n            return this.$translate(\"Ceres::Template.singleItemAttributeTooltip\", {\n              attribute: attribute.name,\n              value: attributeValue.name\n            });\n          }\n\n          return \"\";\n        },\n\n        /**\n         * returns a string for box tooltips, for not available options\n         * @param {number} attributeId\n         * @param {number} attributeValueId\n         */\n        getInvalidOptionTooltip(attributeId, attributeValueId) {\n          const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n          const closestVariations = this.getClosestVariations(qualifiedVariations);\n\n          if (!closestVariations || closestVariations.length <= 0) {\n            return \"\";\n          }\n\n          const invalidSelections = [\n            !!closestVariations[0] ? this.getInvalidSelectionByVariation(closestVariations[0]) : null,\n            !!closestVariations[1] ? this.getInvalidSelectionByVariation(closestVariations[1]) : null\n          ];\n\n          if (!!invalidSelections[0]\n              && !!invalidSelections[1]\n              && invalidSelections[0].attributesToReset.length > invalidSelections[1].attributesToReset.length) {\n            // there is a non-salable variation with less changes\n            return this.$translate(\"Ceres::Template.singleItemNotSalable\");\n          }\n\n          const invalidSelection = invalidSelections[0] || invalidSelections[1];\n          const names = [];\n\n          for (const attribute of invalidSelection.attributesToReset) {\n            if (attribute.attributeId !== attributeId) {\n              names.push(\"<b>\" + attribute.name + \"</b>\");\n            }\n          }\n          if (invalidSelection.newUnit) {\n            names.push(\n                \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\n            );\n          }\n\n          if (!names.length) {\n            return null;\n          }\n\n          return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", {name: names.join(\", \")});\n        },\n\n        /**\n         * returns a list of variations, filtered by attribute or unit\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        getQualifiedVariations(attributeId, attributeValueId, unitId) {\n          if (isDefined(attributeValueId)) {\n            return this.variations.filter(variation => {\n              return isDefined(variation.attributes.find(attribute =>\n                  attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\n            });\n          } else if (isDefined(unitId)) {\n            return this.variations.filter(variation => variation.unitCombinationId === unitId);\n          }\n\n          return this.variations.filter(variation => !variation.attributes.length);\n        },\n\n        /**\n         * return a salable and a non-salable variation with the minimum number of changes on attributes compared to the current selection.\n         * @param {array} qualifiedVariations\n         */\n        getClosestVariations(qualifiedVariations) {\n          let closestSalableVariation, numberOfSalableChanges;\n          let closestNonSalableVariation, numberOfNonSalableChanges;\n\n          for (const variation of qualifiedVariations) {\n            let changes = 0;\n\n            if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit)) {\n              // when the unit dropdown isn't visible, it should have a lower weight for reset investigations\n              const unitWeight = this.possibleUnitCombinationIds.length > 1 && this.isContentVisible ? 0.9 : 0.1;\n\n              changes += unitWeight;\n            }\n\n            for (const attribute of variation.attributes) {\n              if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId) {\n                changes++;\n              }\n            }\n\n            if (variation.isSalable && (!numberOfSalableChanges || changes < numberOfSalableChanges)) {\n              closestSalableVariation = variation;\n              numberOfSalableChanges = changes;\n            } else if (!variation.isSalable && (!numberOfNonSalableChanges || changes < numberOfNonSalableChanges)) {\n              closestNonSalableVariation = variation;\n              numberOfNonSalableChanges = changes;\n            }\n          }\n\n          return [closestSalableVariation, closestNonSalableVariation];\n        },\n\n        /**\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n         * @param {object} variation\n         */\n        getInvalidSelectionByVariation(variation) {\n          const attributesToReset = [];\n          let newUnit = null;\n\n          for (let selectedAttributeId in this.selectedAttributes) {\n            selectedAttributeId = parseInt(selectedAttributeId);\n            const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\n\n            if (!isNull(this.selectedAttributes[selectedAttributeId])) {\n              if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute) {\n                const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\n\n                attributesToReset.push(attributeToReset);\n              }\n            }\n          }\n\n          if (variation.unitCombinationId !== this.selectedUnit) {\n            newUnit = variation.unitCombinationId;\n          }\n\n          return {attributesToReset, newUnit};\n        },\n\n        /**\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n         * @param {object} invalidSelection\n         */\n        correctSelection(invalidSelection) {\n          const messages = [];\n          const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n          for (const attributeToReset of invalidSelection.attributesToReset) {\n            messages.push(\n                this.$translate(\"Ceres::Template.singleItemNotAvailable\", {name: attributeToReset.name})\n            );\n\n            attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\n          }\n\n          if (invalidSelection.newUnit) {\n            if (this.lastContentCount > 1 && this.possibleUnitCombinationIds.length > 1 && !isNull(this.selectedUnit)) {\n              messages.push(\n                  this.$translate(\"Ceres::Template.singleItemNotAvailable\", {\n                    name:\n                        this.$translate(\"Ceres::Template.singleItemContent\")\n                  })\n              );\n            }\n\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, invalidSelection.newUnit);\n          }\n\n          this.$store.commit(`${this.itemId}/variationSelect/setItemSelectedAttributes`, attributes);\n\n          this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n\n          NotificationService.warn(\n              messages.join(\"<br>\")\n          ).closeAfter(5000);\n        },\n\n        /**\n         * returns matching variations with current selection\n         * attributes and unitId could be filled, to check a specific selection\n         * @param {object} attributes\n         * @param {number} unitId\n         * @param {boolean} strict\n         */\n        filterVariations(attributes, unitId, strict, ignoreUnit) {\n          attributes = attributes || this.selectedAttributes;\n          unitId = unitId || this.selectedUnit;\n          strict = !!strict;\n          ignoreUnit = !!ignoreUnit;\n\n          const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\n\n          if (isDefined(this.filteredVariationsCache[key])) {\n            return this.filteredVariationsCache[key];\n          }\n\n          const uniqueValues = [...new Set(Object.values(attributes))];\n          const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\n          const filteredVariations = this.variations.filter(variation => {\n            // the selected unit is not matching\n            if (!ignoreUnit && variation.unitCombinationId !== unitId) {\n              return false;\n            }\n\n            // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n            // requires more than 0 attributes\n            if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\n                && this.attributes.length > 0) {\n              return false;\n            }\n\n            for (const attributeId in attributes) {\n              const variationAttribute = variation.attributes.find(variationAttribute =>\n                  variationAttribute.attributeId === parseInt(attributeId));\n\n              // an attribute is not matching with selection\n              if (variationAttribute &&\n                  variationAttribute.attributeValueId !== attributes[attributeId] &&\n                  (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1)) {\n                return false;\n              }\n            }\n\n            return true;\n          });\n\n          this.filteredVariationsCache[key] = filteredVariations;\n\n          return filteredVariations;\n        },\n\n        /**\n         * returns true, if the selection with a new attribute value would be valid\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         * @param {boolean} filterSalableVariations\n         */\n        isAttributeSelectionValid(attributeId, attributeValueId, filterSalableVariations) {\n          attributeValueId = parseInt(attributeValueId) || null;\n          if (this.selectedAttributes[attributeId] === attributeValueId) {\n            return true;\n          }\n\n          const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n          selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n\n          const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n          let variations = this.filterVariations(selectedAttributes, null, null, ignoreUnit);\n\n          if (filterSalableVariations) {\n            variations = variations.filter(variation => variation.isSalable)\n          }\n\n          return variations.length > 0;\n        },\n\n        /**\n         * returns true, if the selection with a new unitId would be valid\n         * @param {[number, string]} unitId\n         */\n        isUnitSelectionValid(unitId) {\n          unitId = parseInt(unitId);\n          if (this.selectedUnit === unitId) {\n            return true;\n          }\n\n          return this\n              .filterVariations(null, unitId)\n              .filter(variation => variation.isSalable)\n              .length > 0\n        },\n\n        /**\n         * dispatch vuex action 'loadVariation' to archive a variation\n         * dispatches a custom event named 'onVariationChanged'\n         * @param {[string, number, null]} variationId\n         */\n        setVariation(variationId) {\n          if (!isDefined(variationId) && this.currentSelection) {\n            variationId = this.currentSelection.variationId;\n          }\n\n          if (isDefined(variationId)) {\n            this.$store.dispatch(`${this.itemId}/loadVariation`, variationId).then(variation => {\n              document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\n                  {\n                    detail:\n                        {\n                          attributes: variation.attributes,\n                          documents: variation.documents,\n                          itemId: this.itemId\n                        }\n                  }));\n            });\n          }\n        },\n\n        isTextCut(content) {\n          if (this.$refs.attributesContaner) {\n            return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\n          }\n\n          return false;\n        },\n\n        getSelectedAttributeValueName(attribute) {\n          const selectedAttributeValueId = this.selectedAttributes[attribute.attributeId];\n          const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\n\n          if (selectedAttributeValue) {\n            return selectedAttributeValue.name;\n          } else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1) {\n            return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\n          }\n          return this.$translate(\"Ceres::Template.singleItemNoSelection\");\n        },\n\n        transformPossibleUnits(possibleUnits) {\n          return Object.entries(possibleUnits).sort((unitA, unitB) => {\n            unitA = this.splitUnitName(unitA[1]);\n            unitB = this.splitUnitName(unitB[1]);\n            // order by unit\n            if (unitA[1] < unitB[1]) {\n              return -1;\n            }\n            if (unitA[1] > unitB[1]) {\n              return 1;\n            }\n            // order by content (count)\n            if (unitA[0] < unitB[0]) {\n              return -1;\n            }\n            if (unitA[0] > unitB[0]) {\n              return 1;\n            }\n            return 0;\n          });\n        },\n        splitUnitName(unitName) {\n          const unitNameSplit = unitName.split(\" \");\n\n          if (!isNaN(unitNameSplit[0])) {\n            unitNameSplit[0] = unitNameSplit[0].replace(App.currencyPattern.separator_thousands, \"\");\n            unitNameSplit[0] = parseInt(unitNameSplit[0]);\n          }\n\n          return unitNameSplit;\n        }\n      },\n\n  watch:\n      {\n        currentSelection(value) {\n          this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!value);\n        },\n        variations() {\n          // FIX unset variation cache after subsequent variations are loaded\n          this.filteredVariationsCache = {};\n        }\n      }\n}\n</script>\n","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=4a939d05&\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/aditya/WebstormProjects/38618/96/devMlt/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4a939d05')) {\n      api.createRecord('4a939d05', component.options)\n    } else {\n      api.reload('4a939d05', component.options)\n    }\n    module.hot.accept(\"./VariationSelect.vue?vue&type=template&id=4a939d05&\", function () {\n      api.rerender('4a939d05', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/src/app/components/item/VariationSelect.vue\"\nexport default component.exports"],"sourceRoot":""}